<style>
.midcenter {
    position: fixed;
    top: 50%;
    left: 50%;
}
.small-code pre code {
  font-size: 1em;
}
.smaller-code pre code {
  font-size: 0.9em;
}
.smallest-code pre code {
  font-size: 0.6em;
}
.smallestest-code pre code {
  font-size: 0.55em;
}
.big {
  font-size: 10em;
}
</style>


Welcome to BT1101.1
========================================================
author: 
date: 

Introductions Are In Order
========================================================
transition: fade
incremental: true

- Ken Oung
- Jun Weng
- Zhen Xuan
- Jin Wei
- Rhynade
- Selina
- Jian Sheng

Analytics, Schmanalytics
========================================================
transition: fade
incremental: true
- Descriptive Analytics
- Predictive Analytics
- Prescriptive Analytics

What To Expect
========================================================
transition: fade
incremental: true

- RStudio Basics
- Data Management
- Data Visualization
- Linear Regression

You're on your own for these
========================================================
transition: fade
incremental: true

- Statistical Analysis
- Logistic Regression
- Excel
- Unsupervised Learning

Getting Started
========================================================
transition: fade
title: false

<div class="midcenter" style="margin-left:-112.5px; margin-top:-112.5px;">
<img src="Rstudio.jpg" style="background-color:transparent; border:0px; box-shadow:none;"></img>
</div>

Importing Data
========================================================
incremental: true
```{r}
#Set your working directory to where all your files and codes are going to be saved.

setwd("~/R Intro/bza-r-intro/code")
```
```{r}
#Import the current dataset you'll be working with

dmef_dataset <- read.csv("~/R Intro/dmef_dataset.csv")
```

Tabling Frames
========================================================
incremental: true
```{r}
class(dmef_dataset)

library(data.table)

dmef_dataset <- as.data.table(dmef_dataset)
```
```{r}
class(dmef_dataset)
```

Sneak Peeks
========================================================
incremental: true
class: smallestest-code
```{r}
dmef_dataset
```

Let's Try That Again
========================================================
incremental:true
```{r, results = "hide"}
View(dmef_dataset)
```

Maybe Not All At Once
========================================================
incremental: true
class:smallestest-code
```{r}
summary(dmef_dataset)
```

Rows, Rows, Rows
========================================================
incremental: true
class: smaller-code
```data.table[rows, columns, by]```
```{r}
dmef_dataset[3:5]
```

Finding The One
========================================================
incremental: true
class: smaller-code
```{r}
head(dmef_dataset[PRODUCT_NO %in% 987668])
```

But Two's Company
========================================================
incremental:true
class: smaller-code
```{r}
head(dmef_dataset[PRODUCT_NO %in% c(987668, 989457)])
```

Discrimination
========================================================
incremental:true
class: smaller-code
```{r}
head(dmef_dataset[EXT_PRICE < 30])
```

All Together Now
========================================================
incremental:true
class: smaller-code
```{r}
head(dmef_dataset[EXT_PRICE<70 & PRODUCT_NO %in% c(987669, 989457)])
```

Columns.
========================================================
incremental:true
class:small-code
```{r}
ex1 <- dmef_dataset[,.(PRODUCT_NO, QUANTITY, EXT_PRICE)]
```
```{r}
ex1
```

Look Ma, I'm Unique!
========================================================
incremental:true
```{r, results = "hold"}
unique_ex1 <- unique(ex1, by = "PRODUCT_NO")
```
```{r}
unique_ex1
```

Writing Columns
========================================================
incremental:true
```{r, results="hold"}
unique_ex1 <- unique_ex1[, unit_price := EXT_PRICE/QUANTITY]
```
```{r, eval=TRUE}
head(unique_ex1[QUANTITY > 1])
```

Sorting by Groups
========================================================
incremental:true
```{r}
head(ex1[,.(total = sum(EXT_PRICE)), by = PRODUCT_NO])
```

...Deja Vu?
========================================================
incremental:true
class:small-code
```{r}
head(ex1[,.(unit = sum(EXT_PRICE)/sum(QUANTITY)), by = PRODUCT_NO])
```
***
```{r}
head(unique_ex1[,.(PRODUCT_NO, unit_price)])
```

Just Testing You Guys
========================================================
incremental:true
```{r}
ex1[PRODUCT_NO == 987668, .N, by = EXT_PRICE/QUANTITY]
```

Phase II
========================================================
```{r}
dmef_small <- dmef_dataset[, .(
                        ORDER_NO,
                        ZIP, 
                        ORDER_LINE,
                        PRODUCT_CATEGORY_ID, 
                        CHANNEL, 
                        PRODUCT_NO, 
                        EXT_PRICE, 
                        QUANTITY, 
                        RETN_QTY,
                        RETN_REVENUE
                        )]
```

Simple Histograms
========================================================
incremental:true
class:small-code
```{r, echo = FALSE}
dmef_small[, PRICE := EXT_PRICE/QUANTITY]
object.price <- dmef_small[, .(PRODUCT_NO, PRODUCT_CATEGORY_ID, PRICE)]
unique(object.price, by = c("PRODUCT_NO", "PRICE"))
```
```{r}
dmef_small[, PRICE := EXT_PRICE/QUANTITY]
```
```{r}
object.price <- dmef_small[, .(PRODUCT_NO, PRODUCT_CATEGORY_ID, PRICE)]
```
```{r, eval = FALSE}
unique(object.price, by = c("PRODUCT_NO", "PRICE"))
```
```{r}
uniq.object.price <- unique(object.price, by = c("PRODUCT_NO", "PRICE"))
```



All That, Just For This
========================================================
transition: fade
```{r, fig.align='center'}
hist(uniq.object.price[, PRICE],main = "Histogram of all prices",xlab = "Price")
```

Break It Down
========================================================
transition: fade
class:small-code
```{r, fig.align='center'}
hist(uniq.object.price[PRICE < 100, PRICE], breaks=100,
     main = "Histogram of Prices below 100",
     xlab = "Price")
```


Nitpicking
========================================================
transition: fade
incremental:true
```{r}
LastDigit <- function(x) { (x - x%%1) %% 10 }
```
```{r}
uniq.object.price[, ONES.PLACE := LastDigit(PRICE)] 
```

Dollars
========================================================
transition:fade
class:small-code
incremental:true
```{r, fig.align='center'}
hist(uniq.object.price[, ONES.PLACE],
     main = "Histogram of Ones Place",
     xlab = "Ones Place")
```

And Cents
========================================================
transition: fade
incremental:true
```{r}
Cents <- function(x) { round(100 * (x %% 1)) }
```
```{r}
uniq.object.price[, CENTS := Cents(PRICE)]
```

Penny Wise, Pound Foolish
========================================================
transition:fade
class: small-code
incremental:true
```{r, fig.align='center'}
hist(uniq.object.price[, CENTS], breaks=100,
     main = "Histogram of Cents Portion",
     xlab = "Cents")
```

What Have I Done
========================================================
transition:fade
incremental:true
class:small-code
```{r}
uniq.object.price[, .N, by=CENTS][N>10]
```

Something More Productive
========================================================
transition:fade
incremental: true
class: small-code
```{r}
returned <- dmef_small[RETN_QTY > 0]

not.returned <- dmef_small[RETN_QTY == 0]
```
```{r}
table(dmef_small[, RETN_QTY==0])
```
```{r, results = "hold"}
nrow(returned)
nrow(not.returned)
```
```{r}
nrow(returned)/nrow(dmef_small) * 100
```

Price Tag
========================================================
transition:fade
incremental: true
class: small-code
```{r, results = "hold"}
returned.object.price <- uniq.object.price[PRODUCT_NO %in% returned[, PRODUCT_NO]]

not.returned.object.price <- uniq.object.price[PRODUCT_NO %in% not.returned[, PRODUCT_NO]]
```
```{r, results="hold", eval=FALSE}
returned.object.price
not.returned.object.price
```

Price Tag
========================================================
class: small-code
transition: fade
```{r, results="hold", echo=FALSE}
returned.object.price
not.returned.object.price
```

Boxing Day
========================================================
```{r, fig.align='center'}
boxplot(returned.object.price[, PRICE],not.returned.object.price[, PRICE])
```

Malcolm Gladwell
========================================================
class:small-code
```{r, fig.align='center'}
boxplot(returned.object.price[, PRICE],not.returned.object.price[, PRICE],
        main = "Product Prices for Returned vs Not Returned Goods",
        names = c("returned", "not returned"),
        outline=F)
```

Side by Side
========================================================
class:small-code
incremental:true
```{r}
boxplot(returned.object.price[, PRICE],not.returned.object.price[, PRICE],
        names = c("returned", "not returned"))
```
***
```{r}
boxplot(returned.object.price[, PRICE],not.returned.object.price[, PRICE],
        names = c("returned", "not returned"),
        outline=F)
```

Big Spenders
========================================================
class:small-code
incremental:true
```{r, fig.align = 'center'}
boxplot(returned[, EXT_PRICE], not.returned[, EXT_PRICE], outline=F,
        main = "Extended Prices for Returned vs Not Returned Goods",
        names = c("Returned", "Not Returned"))
```

A Barplot is NOT a Histogram
========================================================
class:small-code
```{r, fig.align='center'}
bar1 <- returned[, .N, by = PRODUCT_CATEGORY_ID]

barplot(bar1[,N], names = bar1[,PRODUCT_CATEGORY_ID])
```

And a Histogram is NOT a Barplot
========================================================
class:small-code
incremental:true
```{r, fig.align='center'}
bar2 <- not.returned[, .N, by = PRODUCT_CATEGORY_ID]

barplot(bar2[,N], names = bar2[,PRODUCT_CATEGORY_ID])
```

Combining Bar Plots
========================================================
incremental:true
class:small-code
```{r}
bar1 <- rbind(bar1, data.table(PRODUCT_CATEGORY_ID = "I", N = 0))
```
```{r}
bar1
```
***
```{r}
bar1 <- bar1[order(PRODUCT_CATEGORY_ID)]
bar2 <- bar2[order(PRODUCT_CATEGORY_ID)]
```
```{r}
bar1
```

Overlayering
========================================================
class:small-code
incremental:true
```{r, eval=FALSE}
barplot(bar1[,N], 
        names = bar1[,PRODUCT_CATEGORY_ID], 
        border = "darkblue", 
        col = "darkblue",  
        density = 0, 
        ylim = c(0, max(dmef_small[, .N, by = PRODUCT_CATEGORY_ID][,N])))
```
```{r, eval=FALSE}
par(new=TRUE)
```
```{r, eval=FALSE}
barplot(bar2[,N], 
        names = bar2[,PRODUCT_CATEGORY_ID], 
        border = "red",
        col = "red", 
        density = 0, 
        ylim = c(0,max(dmef_small[, .N, by = PRODUCT_CATEGORY_ID][,N]))) 
```
```{r, eval=FALSE}
legend("top", 
       legend = c("Returned", "Not Returned"), 
       fill = c("darkblue", "red"))
```

Whew
========================================================
```{r, results = "hold", echo=FALSE, fig.align='center'}
barplot(bar1[,N], names = bar1[,PRODUCT_CATEGORY_ID], border = "darkblue", col = "darkblue",  density = 0, 
        ylim = c(0, max(dmef_small[, .N, by = PRODUCT_CATEGORY_ID][,N])))
par(new=TRUE)
barplot(bar2[,N], names = bar2[,PRODUCT_CATEGORY_ID], border = "red", col = "red", density = 0, 
        ylim = c(0,max(dmef_small[, .N, by = PRODUCT_CATEGORY_ID][,N]))) 
legend("top", legend = c("Returned", "Not Returned"), fill = c("darkblue", "red"))

```

Yes, There's an Easier Way
========================================================
incremental:true
class:smallest-code
```{r}
bar <- bar1[,.(bar1[,N], bar2[,N])]
```
```{r}
bar
t(bar)
bar <- as.matrix(t(bar))
```

The Final Barplot
========================================================
class:smaller-code
```{r, fig.align='center'}
barplot(bar, 
        names = bar2[,as.character(PRODUCT_CATEGORY_ID)],
        col=c("darkblue","red"), 
        ylim = c(0, max(dmef_small[, .N, by = PRODUCT_CATEGORY_ID][,N])))
legend("top", legend = c("Returned", "Not Returned"), 
       fill = c("darkblue", "red"))
```

Just Kidding
========================================================
class:small-code
```{R}
perc.returned.by.cat <- dmef_small[order(PRODUCT_CATEGORY_ID), 
                                   .(Percentage.Returned=.SD[RETN_QTY>0, .N]/.N*100),
                                   by=PRODUCT_CATEGORY_ID]
```
```{r, eval=FALSE}
barplot(perc.returned.by.cat[, Percentage.Returned], 
        names=perc.returned.by.cat[, PRODUCT_CATEGORY_ID],
        main = "Percentage of orders returned by category")
```

Room for Improvement
========================================================
```{r, fig.align='center', echo=FALSE}
barplot(perc.returned.by.cat[, Percentage.Returned], 
        names=perc.returned.by.cat[, PRODUCT_CATEGORY_ID],
        main = "Percentage of orders returned by category")
```

Final Boss
========================================================
incremental: true
```{r}
data(mtcars)
```
```{r}
mtcars <- as.data.table(mtcars)
```

Getting Fits
========================================================
incremental: true
class:smaller-code
```{r, strip.white=TRUE}
fit <- lm(mpg ~ ., data = mtcars)
summary(fit)
```

Streamlining
========================================================
incremental: true
class:smaller-code
```{r, strip.white=TRUE}
fit_no_cyl <- lm(mpg ~ . - cyl, data = mtcars)
summary(fit_no_cyl)
```

One Eternity Later
========================================================
incremental: true
class:smaller-code
```{r, strip.white=TRUE}
fit_improved <- lm(mpg ~ wt + qsec + am, data = mtcars)
summary(fit_improved)
```

Of Course There's a Shortcut
========================================================
incremental: true
```{r, strip.white=TRUE, eval=FALSE}
library(MASS)
stepAIC(fit)
```

Oh Right, Scatterplots
========================================================
```{r, fig.align='center'}
plot(mtcars[, mpg], mtcars[, hp])
```

Trust Me, It's Significant
========================================================
```{r, fig.align='center'}
plot(mtcars[, mpg], log(mtcars[, hp]))
```


All Regressions Are Equal
========================================================
incremental:true
class:smaller-code
```{r}
fit_transformed <- lm(mpg ~ . - hp + log(hp), data=mtcars)
```
```{r, eval=FALSE}
stepAIC(fit_transformed)
```
```{r}
fit_final <- lm(mpg ~ wt + am + log(hp), data=mtcars)
```
```{r}
summary(fit_final)
```

But Some Are More Equal Than Others
========================================================
class:smaller-code
incremental:true
- Linearity
- Normality
- Homoscedasticity
- Independence of Errors (time series)


Drawing Lines
========================================================
class:smaller-code
```{r, fig.align='center', strip.white=TRUE, fig.width = 10, fig.height = 7.5}
par(mfrow=c(2,2))
plot(fit_final)
```



Multicollinearity
========================================================
incremental:true
```{r}
library(car)
durbinWatsonTest(fit_final)
vif(fit_final)
```










